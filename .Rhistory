print(names(drug_exposure_temp))
pharmacy_clean1$starttime <- as.character(pharmacy_clean1$starttime)
# Convertir la colonne starttime au format de date souhaité
pharmacy_clean1$starttime <- as.Date(pharmacy_clean1$starttime)
#pharmacy_stoptime
pharmacy_clean1$stoptime <- as.character(pharmacy_clean1$stoptime)
pharmacy_clean1$stoptime <- as.Date(pharmacy_clean1$stoptime)
#travail sur medication
pharmacy_clean1 <- pharmacy_clean1[!pharmacy_clean1$medication %in% c(1, 2), ]
unique_medication <- unique(pharmacy_clean1$medication)
# Créer un nouveau dataframe avec ces valeurs uniques
unique_medication_df <- data.frame(medication = unique_medication)
write.csv(unique_medication_df, file = "unique_medication")
CONCEPT_drug_only <- CONCEPT[CONCEPT$domain_id == "Drug", ]
medication_map <- read_csv("medication_map.csv")
final_medication_map <- medication_map[, c("source_code_description", "target_concept_id")]
pharmacy_clean2 <- pharmacy_clean1 %>%
left_join(final_medication_map, by = c("medication" = "source_code_description")) %>%
# Selecting necessary columns and renaming the target_concept_id to medication
select(-medication, medication = target_concept_id)
drug_exposure_temp$person_id <- pharmacy_clean2$subject_id
if(nrow(drug_exposure_temp) == 0) {
drug_exposure_temp <- drug_exposure_temp[seq_len(nrow(pharmacy_clean2)), ]
}
drug_exposure_temp$person_id <- pharmacy_clean2$subject_id
drug_exposure_temp$visit_occurence_id <- pharmacy_clean2$hadm_id
drug_exposure_temp$drug_exposure_id <- pharmacy_clean2$pharmacy_id
drug_exposure_temp$drug_exposure_start_date <- pharmacy_clean2$starttime
drug_exposure_temp$drug_exposure_end_date <- pharmacy_clean2$stoptime
drug_exposure_temp$drug_source_concept_id <- pharmacy_clean2$medication
View(drug_exposure)
drug_exposure_temp$drug_exposure_start_date_time <- drug_exposure_temp$drug_exposure_start_date
print(head(drug_exposure_temp))
drug_exposure_temp <- drug_exposure_temp %>%
mutate(drug_exposure_start_date_time = drug_exposure_start_date)
drug_exposure_temp <- drug_exposure_temp %>%
mutate(drug_exposure_start_datetime = drug_exposure_start_date)
drug_exposure_temp <- drug_exposure_temp[, -ncol(drug_exposure_temp)]
#Créer un drug_exposure_temp
drug_exposure_temp <- drug_exposure[FALSE, ]
if(nrow(drug_exposure_temp) == 0) {
drug_exposure_temp <- drug_exposure_temp[seq_len(nrow(pharmacy_clean2)), ]
}
drug_exposure_temp$person_id <- pharmacy_clean2$subject_id
drug_exposure_temp$visit_occurence_id <- pharmacy_clean2$hadm_id
drug_exposure_temp$drug_exposure_id <- pharmacy_clean2$pharmacy_id
drug_exposure_temp$drug_exposure_start_date <- pharmacy_clean2$starttime
drug_exposure_temp$drug_exposure_end_date <- pharmacy_clean2$stoptime
drug_exposure_temp$drug_source_concept_id <- pharmacy_clean2$medication
drug_exposure_temp <- drug_exposure_temp %>%
mutate(drug_exposure_start_datetime = drug_exposure_start_date) %>%
mutate(drug_exposure_end_datetime = drug_exposure_end_date)
drug_exposure_temp <- drug_exposure_temp %>%
mutate(drug_exposure_start_datetime = drug_exposure_start_date) %>%
mutate(drug_exposure_end_datetime = drug_exposure_end_date) %>%
mutate(drug_concept_id = drug_source_concept_id)
common_columns <- intersect(names(drug_exposure_temp), names(drug_exposure))
# Subset drug_exposure_temp to only include the common columns
drug_exposure_temp <- drug_exposure_temp[, common_columns]
drug_exposure_temp$visit_occurence_id <- pharmacy_clean2$hadm_id
drug_exposure_temp <- drug_exposure[FALSE, ]
if(nrow(drug_exposure_temp) == 0) {
drug_exposure_temp <- drug_exposure_temp[seq_len(nrow(pharmacy_clean2)), ]
}
drug_exposure_temp$person_id <- pharmacy_clean2$subject_id
drug_exposure_temp$visit_occurrence_id <- pharmacy_clean2$hadm_id
drug_exposure_temp$drug_exposure_id <- pharmacy_clean2$pharmacy_id
drug_exposure_temp$drug_exposure_start_date <- pharmacy_clean2$starttime
drug_exposure_temp$drug_exposure_end_date <- pharmacy_clean2$stoptime
drug_exposure_temp$drug_source_concept_id <- pharmacy_clean2$medication
drug_exposure_temp <- drug_exposure_temp %>%
mutate(drug_exposure_start_datetime = drug_exposure_start_date) %>%
mutate(drug_exposure_end_datetime = drug_exposure_end_date) %>%
mutate(drug_concept_id = drug_source_concept_id)
common_columns <- intersect(names(drug_exposure_temp), names(drug_exposure))
write.csv(drug_exposure_temp, file = "drug_exposure_mapped")
write.csv(drug_exposure_temp, file = "drug_exposure_mapped.csv")
library(readr)
drug_exposure_mapped <- read_csv("drug_exposure_mapped.csv")
View(drug_exposure_mapped)
View(drug_exposure_mapped)
View(drug_exposure_temp)
View(pharmacy)
labevents <-read.csv("hosp/labevents.csv")
View(labevents)
unique_values <- unique(labevents$itemid)
unique_values
labevents1 <- labevents.drop_duplicates(subset="itemid")
labevents1 <- labevents %>%
distinct(itemid, .keep_all = TRUE)
labevents1 <- labevents %>%
distinct(itemid, .keep_all = TRUE)
library(tidyverse)
labevents1 <- labevents %>%
distinct(itemid, .keep_all = TRUE)
View(labevents1)
write.csv(labevents, file = "labevents_usagi.csv")
labevents1 <- labevents1 %>%
select(c(itemid,specimen_id))
write.csv(labevents, file = "labevents_usagi1.csv")
write.csv(labevents1, file = "labevents_usagi1.csv")
labevents <-read.csv("hosp/d_labevents.csv")
labevents <-read.csv("hosp/d_labitems.csv")
####LAB events####
labevents <-read.csv("hosp/labevents.csv")
####LAB events####
labevents <-read.csv("hosp/labevents.csv")
labitems <-read.csv("hosp/d_labitems.csv")
View(labitems)
labevents1 <- labevents %>%
distinct(itemid, .keep_all = TRUE)
labevents1 <- labevents1 %>%
select(c(itemid,specimen_id))
labevents1 <- labevents1 %>%
select(c(itemid))
resultat <- inner_join(labevents1, labitems, by = "itemid")
View(resultat)
write.csv(resultat, file = "labevents_usagi2.csv")
lab_dico <- read.csv("lab_dico.csv")
View(lab_dico)
library(tidyverse)
library(tidyverse)
#Créer un drug_exposure_temp
drug_exposure_temp <- drug_exposure[FALSE, ]
pharmacy <- read.csv("drug_exposure/pharmacy.csv")
#importer la table drug_exposure OMOP exportée depuis DBeaver
drug_exposure <- read.csv("drug_exposure/drug_exposure.csv")
#Créer un drug_exposure_temp vide (sans ses lignes en ne gardant que les colonnes)
drug_exposure_temp <- drug_exposure[FALSE, ]
View(drug_exposure_temp)
View(drug_exposure)
#On selectionne les colonnes à garder dans la table pharmacy et on supprime les rows avec des NA
pharmacy_selected <- pharmacy[, c("subject_id", "hadm_id", "pharmacy_id", "starttime", "stoptime", "medication")]
pharmacy_clean <- na.omit(pharmacy_selected)
View(pharmacy_clean)
View(pharmacy_selected)
View(pharmacy_clean)
View(pharmacy_selected)
pharmacy_clean[7]
pharmacy_clean[:7]
pharmacy_clean[7,]
pharmacy_clean$medication[7,]
pharmacy_clean$medication[7]
View(pharmacy_selected)
pharmacy_clean <- pharmacy_clean[rowSums(pharmacy_clean == "") == 0, ]
View(pharmacy_clean)
#Travail sur la colonne medication pour avoir une source de données pour Usagi
unique_medication <- unique(pharmacy_clean$medication)
# Créer un nouveau dataframe avec ces valeurs uniques
unique_medication_df <- data.frame(medication = unique_medication)
write.csv(unique_medication_df, file = "unique_medication")
View(unique_medication_df)
# Créer un nouveau dataframe avec ces valeurs uniques
unique_medication_df <- data.frame(medication = unique_medication)
write.csv(unique_medication_df, file = "drug_exposure/unique_medication.csv")
#Après un long mapping sur Usagi on importe drugs_map.csv
drugs_map <- read.csv("drug_exposure/drugs_map.csv")
View(drugs_map)
#Après un long mapping sur Usagi on importe drugs_map.csv
drugs_map <- read.csv("drug_exposure/drugs_map.csv")
#On ne garde que les colonnes qui nous intéressent à savoir les valeurs dans pharmacy et les concept_id OMOP
drugs_map <- drugs_map[, c("source_code_description", "target_concept_id")]
pharmacy_clean2 <- pharmacy_clean %>%
left_join(final_medication_map, by = c("medication" = "source_code_description")) %>%
# Selecting necessary columns and renaming the target_concept_id to medication
select(-medication, medication = target_concept_id)
pharmacy_clean2 <- pharmacy_clean %>%
left_join(drugs_map, by = c("medication" = "source_code_description")) %>%
# Selecting necessary columns and renaming the target_concept_id to medication
select(-medication, medication = target_concept_id)
View(pharmacy_clean2)
#remplir maintenant drug_exposure_temp
#on s'assure d'avoir le même nombre de rows
if(nrow(drug_exposure_temp) == 0) {
drug_exposure_temp <- drug_exposure_temp[seq_len(nrow(pharmacy_clean2)), ]
}
#On remplit les colonnes avec celles qui leur correspondent dans pharmacy
drug_exposure_temp$person_id <- pharmacy_clean2$subject_id
drug_exposure_temp$visit_occurrence_id <- pharmacy_clean2$hadm_id
drug_exposure_temp$drug_exposure_id <- pharmacy_clean2$pharmacy_id
drug_exposure_temp$drug_exposure_start_date <- pharmacy_clean2$starttime
drug_exposure_temp$drug_exposure_end_date <- pharmacy_clean2$stoptime
drug_exposure_temp$drug_source_concept_id <- pharmacy_clean2$medication
drug_exposure_temp <- drug_exposure_temp %>%
mutate(drug_exposure_start_datetime = drug_exposure_start_date) %>%
mutate(drug_exposure_end_datetime = drug_exposure_end_date) %>%
mutate(drug_concept_id = drug_source_concept_id)
#32849 pour drug_type_concept_id
drug_exposure_temp$drug_type_concept_id <- 32849
write.csv(drug_exposure_temp, file = "drug_exposure/drug_exposure_mapped.csv")
poc <- read.csv("drug_exposure/drug_exposure_mapped.csv")
write.csv(drug_exposure_temp, file = "drug_exposure/drug_exposure_mapped.csv" ,row.names = FALSE)
poc <- read.csv("drug_exposure/drug_exposure_mapped.csv")
View(drug_exposure_temp)
drug_exposure_temp <- drug_exposure_temp %>%
mutate_all(~ ifelse(. == "NA", NA, .))
drug_exposure_temp$sig[drug_exposure_temp$sig == "NA"] <- NULL
write.csv(drug_exposure_temp, file = "drug_exposure/drug_exposure_mapped.csv" ,row.names = FALSE)
View(poc)
poc <- read.csv("drug_exposure/drug_exposure_mapped1.csv")
write.csv(drug_exposure_temp, file = "drug_exposure/drug_exposure_mapped1.csv" ,row.names = FALSE)
poc <- read.csv("drug_exposure/drug_exposure_mapped1.csv")
View(poc)
drug_exposure_temp <- drug_exposure_temp %>%
mutate_all(~ ifelse(. == "", NA, .))
drug_exposure_temp <- drug_exposure_temp %>%
mutate_all(~ ifelse(. == "NA", "", .))
write.csv(drug_exposure_temp, file = "drug_exposure/drug_exposure_mapped.csv", na = "NULL", row.names = FALSE)
View(drug_exposure_temp)
drug_exposure_temp[drug_exposure_temp == "NA"] <- ""
# Save the CSV file
write.csv(drug_exposure_temp, file = "drug_exposure/drug_exposure_mapped.csv", na = "", row.names = FALSE)
gc()
library(tidyverse)
mimic_patients <- read.csv("person/patients.csv")
omop_person <- read.csv("person/person.csv")
View(mimic_patients)
View(omop_person)
#Import des tables MIMIC-IV et OMOP
mimic_patients <- read.csv("person/patients.csv")
omop_person <- read.csv("person/person.csv")
mimic_admissions <-  read.csv("person/admissions.csv")
View(omop_person)
omop_person <- omop_person[FALSE, ]
omop_person_temp <- omop_person[FALSE, ]
mimic_patients <- read.csv("person/patients.csv")
omop_person <- read.csv("person/person.csv")
mimic_admissions <-  read.csv("person/admissions.csv")
omop_person_temp <- omop_person[FALSE, ]
#On selectionne les colonnes à garder dans la table patients et on supprime les rows avec des vides
patients_selected <- patients[, c("subject_id", "gender", "anchor_age", "anchor_year", "anchor_year_group")]
#On selectionne les colonnes à garder dans la table patients et on supprime les rows avec des vides
patients_selected <- mimic_patients[, c("subject_id", "gender", "anchor_age", "anchor_year", "anchor_year_group")]
patients_clean <- patients_clean[rowSums(patients_clean == "") == 0, ]
#importer la table pharmacy de MIMIC-IV
pharmacy <- read.csv("drug_exposure/pharmacy.csv")
#importer la table drug_exposure OMOP exportée depuis DBeaver
drug_exposure <- read.csv("drug_exposure/drug_exposure.csv")
#Créer un drug_exposure_temp vide (sans ses lignes en ne gardant que les colonnes)
drug_exposure_temp <- drug_exposure[FALSE, ]
#On selectionne les colonnes à garder dans la table pharmacy et on supprime les rows avec des vides
pharmacy_selected <- pharmacy[, c("subject_id", "hadm_id", "pharmacy_id", "starttime", "stoptime", "medication")]
pharmacy_clean <- pharmacy_clean[rowSums(pharmacy_clean == "") == 0, ]
pharmacy_clean <- pharmacy_selected[rowSums(pharmacy_clean == "") == 0, ]
pharmacy_clean <- pharmacy_selected[rowSums(pharmacy_selected == "") == 0, ]
#Travail sur la colonne medication pour avoir une source de données pour Usagi
unique_medication <- unique(pharmacy_clean$medication)
unique_medication_df <- data.frame(medication = unique_medication)
write.csv(unique_medication_df, file = "drug_exposure/unique_medication.csv")
#Après un long mapping sur Usagi on importe drugs_map.csv
drugs_map <- read.csv("drug_exposure/drugs_map.csv")
#On ne garde que les colonnes qui nous intéressent à savoir les valeurs dans pharmacy et les concept_id OMOP
drugs_map <- drugs_map[, c("source_code_description", "target_concept_id")]
pharmacy_clean2 <- pharmacy_clean %>%
left_join(drugs_map, by = c("medication" = "source_code_description")) %>%
# Selecting necessary columns and renaming the target_concept_id to medication
select(-medication, medication = target_concept_id)
#remplir maintenant drug_exposure_temp
#on s'assure d'avoir le même nombre de rows
if(nrow(drug_exposure_temp) == 0) {
drug_exposure_temp <- drug_exposure_temp[seq_len(nrow(pharmacy_clean2)), ]
}
#On remplit les colonnes avec celles qui leur correspondent dans pharmacy
drug_exposure_temp$person_id <- pharmacy_clean2$subject_id
drug_exposure_temp$visit_occurrence_id <- pharmacy_clean2$hadm_id
drug_exposure_temp$drug_exposure_id <- pharmacy_clean2$pharmacy_id
drug_exposure_temp$drug_exposure_start_date <- pharmacy_clean2$starttime
drug_exposure_temp$drug_exposure_end_date <- pharmacy_clean2$stoptime
drug_exposure_temp$drug_source_concept_id <- pharmacy_clean2$medication
drug_exposure_temp <- drug_exposure_temp %>%
mutate(drug_exposure_start_datetime = drug_exposure_start_date) %>%
mutate(drug_exposure_end_datetime = drug_exposure_end_date) %>%
mutate(drug_concept_id = drug_source_concept_id)
#32849 pour drug_type_concept_id car c'est une colonne qui ne doit pas rester vide dans les parametres de la base de données
drug_exposure_temp$drug_type_concept_id <- 32849
#Gérer les NA car sinon la base de donnée ne les acceptera pas
drug_exposure_temp[drug_exposure_temp == "NA"] <- ""
# Save the CSV file
write.csv(drug_exposure_temp, file = "drug_exposure/drug_exposure_mapped.csv", na = "", row.names = FALSE)
library(tidyverse)
#Import des tables MIMIC-IV et OMOP
mimic_patients <- read.csv("person/patients.csv")
omop_person <- read.csv("person/person.csv")
mimic_admissions <-  read.csv("person/admissions.csv")
#Création d'une table OMOP vide à remplir
omop_person_temp <- omop_person[FALSE, ]
#On selectionne les colonnes à garder dans la table patients et on supprime les rows avec des vides
patients_selected <- mimic_patients[, c("subject_id", "gender", "anchor_age", "anchor_year", "anchor_year_group")]
patients_clean <- patients_selected[rowSums(patients_selected == "") == 0, ]
#Estimation de l'année de naissance
patients_clean <- patients_clean %>%
# Extract the first year from the anchor_year_group (assuming it's always formatted like "2011 - 2013")
mutate(start_year = as.numeric(sub(" .*", "", anchor_year_group))) %>%
# Calculate estimated year of birth
mutate(estimated_year_of_birth = start_year - anchor_age) %>%
# Select columns to keep (remove start_year if you don't want it in the final dataframe)
select(-start_year)
View(patients_clean)
View(patients_clean)
#travail sur gender_concept_id
#On vérifie si il n'y a que deux genders dans notre table MIMIC
unique_genders <- unique(person_clean$gender)
#travail sur gender_concept_id
#On vérifie si il n'y a que deux genders dans notre table MIMIC
unique_genders <- unique(patients_clean$gender)
unique_genders_df <- data.frame(genders = unique_genders)
#Export vers Usagi
write.csv(unique_genders_df, file = "person/unique_genders.csv")
person_clean <- person_clean %>%
mutate(gender = case_when(
gender == "M" ~ "8507",   # Remplacer "M" par "8507"
gender == "F" ~ "8532",   # Remplacer "F" par "8532"
TRUE ~ gender             # Garder les valeurs telles quelles pour les autres cas (au cas où on aurait d'autres genders dans d'autres datasets)
))
#Pas besoin vu que'on a que deux valeurs M et F et que les codes sont facilement accessibles dans Rabbit in a hat
patients_clean <- patients_clean %>%
mutate(gender = case_when(
gender == "M" ~ "8507",   # Remplacer "M" par "8507"
gender == "F" ~ "8532",   # Remplacer "F" par "8532"
TRUE ~ gender             # Garder les valeurs telles quelles pour les autres cas (au cas où on aurait d'autres genders dans d'autres datasets)
))
#drop les colonnes inutiles
patients_clean <- patients_clean[, c("subject_id", "gender", "estimated_year_of_birth")]
#Travail sur race and ethnicity
mimic_admissions_clean <- mimic_admissions[, c("subject_id", "race")]
View(mimic_admissions_clean)
unique_races <- unique(mimic_admissions_clean$race)
unique_races_df <- data.frame(races = unique_races)
#Export vers Usagi
write.csv(unique_races_df, file = "person/unique_genders.csv")
#Export vers Usagi
write.csv(unique_races_df, file = "person/unique_races.csv")
#Export vers Usagi
write.csv(unique_genders_df, file = "person/unique_genders.csv")
View(mimic_admissions)
View(mimic_admissions_clean)
#Importer la map USAGI
ra_eth_map <- read.csv("person/ra_eth_map .csv")
#Importer la map USAGI
ra_eth_map <- read.csv("person/ra_eth_map.csv")
View(ra_eth_map)
ra_eth_map <- ra_eth_map[, c("source_code_description","target_concept_id")]
mimic_admissions_clean2 <- mimic_admissions_clean %>%
left_join(ra_eth_map, by = c("race" = "source_code_description")) %>%
# Selecting necessary columns and renaming the target_concept_id to race
select(-race, race = target_concept_id)
View(mimic_admissions_clean2)
mimic_admissions_clean2 <- mimic_admissions_clean %>%
left_join(ra_eth_map, by = c("race" = "source_code_description")) %>%
# Sélectionner les colonnes nécessaires et renommer target_concept_id en race
select(-race, race = target_concept_id) %>%
# Ajouter la colonne ethnicity avec les conditions spécifiées
mutate(ethnicity = case_when(
race == 38003563 ~ 38003563,  # Si race est égale à 38003563
TRUE ~ 38003564               # Sinon, dans tous les autres cas
))
View(patients_clean)
#On fait le inner_join
final_patients <- mimic_admissions_clean2 %>%
inner_join(patients_clean, by = "subject_id")
View(final_patients)
number_of_unique_subject_ids <- length(unique(final_patients$subject_id))
# Afficher le nombre de valeurs uniques
print(number_of_unique_subject_ids)
mimic_admissions_clean2_unique <- mimic_admissions_clean2 %>%
# Grouper par subject_id pour traiter chaque groupe séparément
group_by(subject_id) %>%
# Appliquer la logique de filtrage spécifiée
filter(
if (n() == 1) {
TRUE  # Si un seul enregistrement, gardez-le
} else {
!race %in% c(38003563, 38003564) | row_number() == 1
}
) %>%
# Dissoudre le groupement pour revenir à un cadre de données normal
ungroup()
View(mimic_admissions_clean2_unique)
duplicates <- mimic_admissions_clean2 %>%
# Grouper les données par subject_id
group_by(subject_id) %>%
# Filtrer pour ne garder que les groupes avec plus d'une entrée
filter(n() > 1) %>%
# Dissoudre le groupement pour revenir à un cadre de données normal
ungroup()
View(duplicates)
duplicates <- mimic_admissions_clean2 %>%
# Grouper les données par subject_id
group_by(subject_id) %>%
# Filtrer pour ne garder que les groupes avec plus d'une entrée
filter(n() > 1)
View(duplicates)
mimic_admissions_unique <- mimic_admissions_clean2 %>%
distinct(subject_id, .keep_all = TRUE)
View(mimic_admissions_unique)
#On fait le inner_join
final_patients <- mimic_admissions_unique %>%
inner_join(patients_clean, by = "subject_id")
View(final_patients)
View(omop_person_temp)
omop_person_temp$person_id <- final_patients$subject_id
View(final_patients)
#on s'assure d'avoir le même nombre de rows
if(nrow(omop_person_temp) == 0) {
omop_person_temp<- omop_person_temp[seq_len(nrow(final_patients)), ]
}
omop_person_temp$person_id <- final_patients$subject_id
omop_person_temp$year_of_birth <- final_patients$estimated_year_of_birth
omop_person_temp$gender_concept_id <- final_patients$gender
omop_person_temp$race_concept_id <- final_patients$race
omop_person_temp$ethnicity_concept_id <- final_patients$ethnicity
#Gérer les NA car sinon la base de donnée ne les acceptera pas
omop_person_temp[omop_person_temp == "NA"] <- ""
# Save the CSV file
write.csv(omop_person_temp, file = "person/person_mapped.csv", na = "", row.names = FALSE)
library(tidyverse)
#Import des tables MIMIC-IV et OMOP
omop_measurement <- read.csv("measurement/measurement.csv")
mimic_labevents <- read.csv("measurement/labevents.csv")
mimic_labitems <-  read.csv("measurement/d_labitems.csv")
mimic_labitems <-  read.csv("measurement/microbiologyevents.csv")
mimic_labevents <- read.csv("measurement/labevents.csv")
mimic_labitems <-  read.csv("measurement/d_labitems.csv")
mimic_microbio <-  read.csv("measurement/microbiologyevents.csv")
View(mimic_microbio)
#labevents est trop volumineux pour Rabbit in a hat on va donc le raccourcir
mimic_labevents_subset = mimic_labevents[1:1000, ]
write.csv(mimic_labevents_subset, file = "measurement/labevents_subset.csv",  row.names = FALSE)
View(mimic_labitems)
View(mimic_labevents)
omop_measurement <- read.csv("measurement/measurement.csv")
mimic_labevents <- read.csv("measurement/labevents.csv")
mimic_labitems <-  read.csv("measurement/d_labitems.csv")
library(tidyverse)
#Import des tables MIMIC-IV et OMOP
omop_measurement <- read.csv("measurement/measurement.csv")
mimic_labevents <- read.csv("measurement/labevents.csv")
mimic_labitems <-  read.csv("measurement/d_labitems.csv")
measurement_temp <- omop_measurement[FALSE, ]
#labevents est trop volumineux pour Rabbit in a hat on va donc le raccourcir
mimic_labevents_subset = mimic_labevents[1:1000, ]
write.csv(mimic_labevents_subset, file = "measurement/labevents_subset.csv",  row.names = FALSE)
mimic_labevents_selected <- mimic_labevents[, c("labevents_id","subject_id","hadm_id","itemid","charttime","valuenum","valueuom","value")]
mimic_labevents_selected <- mimic_labevents[, c("labevent_id","subject_id","hadm_id","itemid","charttime","valuenum","valueuom","value")]
#Travail sur itemid pour avoir une source de données pour Usagi
unique_itemid <- unique(mimic_labevents$itemid)
unique_itemid_df <- data.frame(itemid = unique_itemid)
View(unique_itemid_df)
View(mimic_labitems)
unique_itemid_df <- inner_join(unique_itemid_df, mimic_labitems, by = "itemid")
#Travail sur itemid pour avoir une source de données pour Usagi
unique_itemid <- unique(mimic_labevents$itemid)
unique_itemid_df <- data.frame(itemid = unique_itemid)
mimic_labitems <- mimic_labitems[, c("itemid","label")]
unique_itemid_df <- inner_join(unique_itemid_df, mimic_labitems, by = "itemid")
write.csv(unique_itemid_df, file = "measurement/unique_itemid.csv")
#Après un loooooooong mapping sur Usagi on importe lab_map.csv
lab_map <- read.csv("measurement/lab_map.csv")
#On ne garde que les colonnes qui nous intéressent à savoir les valeurs dans pharmacy et les concept_id OMOP
lab_map <- lab_map[, c("source_code_description", "target_concept_id")]
View(lab_map)
#Après un loooooooong mapping sur Usagi on importe lab_map.csv
lab_map <- read.csv("measurement/lab_map.csv")
View(mimic_labevents_selected)
mimic_labevents1 <- mimic_labevents_selected %>%
left_join(lab_map, by = c("itemid" = "source_code_description")) %>%
# Selecting necessary columns and renaming the target_concept_id to medication
select(-itemid, itemid = target_concept_id)
mimic_labevents1 <- mimic_labevents_selected %>%
left_join(lab_map, by = c("itemid" = "target_concept_id")) %>%
# Selecting necessary columns and renaming the target_concept_id to medication
select(-itemid, itemid = target_concept_id)
mimic_labevents1 <- mimic_labevents_selected %>%
left_join(lab_map, by = c("itemid" = "target_concept_id"))
View(mimic_labevents1)
#On ne garde que les colonnes qui nous intéressent à savoir les valeurs dans pharmacy et les concept_id OMOP
lab_map <- lab_map[, c("source_code", "target_concept_id")]
mimic_labevents1 <- mimic_labevents_selected %>%
left_join(lab_map, by = c("itemid" = "source_code")) %>%
# Selecting necessary columns and renaming the target_concept_id to medication
select(-itemid, itemid = target_concept_id)
unique_valueom <- unique(mimic_labevents$valueom)
unique_valueom_df <- data.frame(valueom = unique_valueom)
write.csv(unique_valueom, file = "measurement/unique_valueom.csv")
View(mimic_labevents)
#Même chose pour la colonne valueuom
unique_valueuom <- unique(mimic_labevents$valueuom)
unique_valueuom_df <- data.frame(valueuom = unique_valueuom)
write.csv(unique_valueuom, file = "measurement/unique_valueuom.csv")
mimic_labevents1$person_id <- measurement_temp$subject_id
View(mimic_labevents1)
measurement_temp$person_id <- mimic_labevents1$subject_id
measurement_temp$visit_occurrence_id <- mimic_labevents1$hadm_id
measurement_temp <- omop_measurement[FALSE, ]
if(nrow(measurement_temp) == 0) {
measurement_temp <- measurement_temp[seq_len(nrow(mimic_labevents1)), ]
}
measurement_temp$person_id <- mimic_labevents1$subject_id
measurement_temp$visit_occurrence_id <- mimic_labevents1$hadm_id
measurement_temp$measurement_id <- mimic_labevents1$labevent_id
measurement_temp$value_source_value <- mimic_labevents1$value
measurement_temp$measurement_date <- mimic_labevents1$charttime
measurement_temp$value_as_number <- mimic_labevents1$valuenum
measurement_temp$unit_source_value <- mimic_labevents1$valueuom
measurement_temp$measurement_concept_id <- mimic_labevents1$itemid
drug_exposure_temp$measurement_type_concept_id <- 32856
measurement_temp$measurement_type_concept_id <- 32856
View(measurement_temp)
#Gérer les NA car sinon la base de donnée ne les acceptera pas
measurement_temp[measurement_temp == "NA"] <- ""
# Save the CSV file
write.csv(measurement_temp, file = "measurement/measurement_mapped.csv", na = "", row.names = FALSE)
